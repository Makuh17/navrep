#!/usr/bin/env python
from __future__ import print_function
from copy import deepcopy
import numpy as np
import os
import random
import tensorflow as tf
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan

from navrep.models.vae2d import ConvVAE, reset_graph
from navrep.models.rnn import reset_graph, sample_hps_params, MDNRNN, get_pi_idx
from navrep.tools.data_extraction import (
    rosbag_to_lidar_dataset,
    msg_to_lidar_dataset,
    x_to_raw_scans,
)
from navrep.tools.rings import generate_rings

_Z = 32

# parameters
TEMPERATURE = 0.1

initial_z_path = os.path.expanduser(
    "~/navrep/datasets/M/ian/000_mus_logvars_robotstates_actions_rewards_dones.npz"
)
rnn_model_path = os.path.expanduser("~/navrep/models/M/rnn.json")
vae_model_path = os.path.expanduser("~/navrep/models/V/vae.json")


class RNNDreamNode(object):
    def __init__(self):
        rospy.init_node("rnn_dream_node")
        self.lidar_pub = rospy.Publisher("/predicted_scan", LaserScan, queue_size=1)

        # vars
        self.viewer = None

        # models
        reset_graph()
        self.rnn = MDNRNN(sample_hps_params, gpu_mode=False)
        self.vae = ConvVAE(batch_size=1, is_training=False)

        self.vae.load_json(vae_model_path)
        self.rnn.load_json(rnn_model_path)

        # rings
        self.rings_def = generate_rings(64, 64)

        # load initial image encoding
        arrays = np.load(initial_z_path)
        initial_mu = arrays["mus"][0]
        initial_logvar = arrays["logvars"][0]
        initial_z = initial_mu + np.exp(initial_logvar / 2.0) * np.random.randn(
            *(initial_mu.shape)
        )

        self.prev_z = initial_z
        self.prev_restart = np.array([0])
        self.rnn_state = self.rnn.sess.run(self.rnn.zero_state)
        self.cmd_vel = Twist()

        rospy.Subscriber("/cmd_vel", Twist, self.callback, queue_size=1)
        rospy.Timer(rospy.Duration(0.1), self.step_dream)
        rospy.spin()

    def callback(self, msg):
        self.cmd_vel = msg

    def step_dream(self, event=None):
        action = np.array(
            [self.cmd_vel.linear.x, self.cmd_vel.linear.y, self.cmd_vel.angular.z]
        )
        print(action)

        feed = {
            self.rnn.input_z: np.reshape(self.prev_z, (1, 1, _Z)),
            self.rnn.input_action: np.reshape(action, (1, 1, 3)),
            self.rnn.input_restart: np.reshape(self.prev_restart, (1, 1)),
            self.rnn.initial_state: self.rnn_state,
        }

        [logmix, mean, logstd, logrestart, next_state] = self.rnn.sess.run(
            [
                self.rnn.out_logmix,
                self.rnn.out_mean,
                self.rnn.out_logstd,
                self.rnn.out_restart_logits,
                self.rnn.final_state,
            ],
            feed,
        )

        OUTWIDTH = _Z

        # adjust temperatures
        logmix2 = np.copy(logmix) / TEMPERATURE
        logmix2 -= logmix2.max()
        logmix2 = np.exp(logmix2)
        logmix2 /= logmix2.sum(axis=1).reshape(OUTWIDTH, 1)

        mixture_idx = np.zeros(OUTWIDTH)
        chosen_mean = np.zeros(OUTWIDTH)
        chosen_logstd = np.zeros(OUTWIDTH)
        for j in range(OUTWIDTH):
            idx = get_pi_idx(np.random.rand(), logmix2[j])
            mixture_idx[j] = idx
            chosen_mean[j] = mean[j][idx]
            chosen_logstd[j] = logstd[j][idx]

        rand_gaussian = np.random.randn(OUTWIDTH) * np.sqrt(TEMPERATURE)
        next_z = chosen_mean + np.exp(chosen_logstd) * rand_gaussian

        next_restart = 0
        done = False
        if logrestart[0] > 0:
            next_restart = 1
            done = True

        rings_pred = (
            self.vae.decode(self.prev_z.reshape(1, _Z))
            * self.rings_def["rings_to_bool"]
        )
        predicted_ranges = self.rings_def["rings_to_lidar"](rings_pred, 1080)
        out_msg = generate_laser_scan()
        out_msg.header.frame_id = "sick_laser_front"
        out_msg.ranges = tuple(predicted_ranges[0, :])
        self.lidar_pub.publish(out_msg)
        if True:
            import matplotlib.pyplot as plt

            plt.ion()
            # rings
            #             self.rings_def["visualize_rings"](rings_pred[0], scan=None)
            #             plt.ylim([0,10])
            plt.imshow(rings_pred[0, :, :, 0], cmap=plt.cm.Greys)
            # update
            plt.pause(0.01)
        if False:
            from navrep.tools.render import render_lidar

            self.viewer = render_lidar(
                out_msg.ranges, out_msg.angle_min, out_msg.angle_max, viewer=self.viewer
            )

        self.prev_z = next_z
        self.prev_restart = next_restart
        self.rnn_state = next_state


def generate_laser_scan():
    msg = LaserScan()
    msg.header.stamp = rospy.Time.now()
    msg.angle_min = 0.0
    msg.angle_max = 6.27673959732
    msg.angle_increment = 0.00581718236208
    msg.time_increment = 8.22030488052e-05
    msg.scan_time = 0.0666666701436
    msg.range_min = 0.0500000007451
    msg.range_max = 100.0
    return msg


if __name__ == "__main__":
    rnn_dream_node = RNNDreamNode()
